// Cell Ranger preprocessing workflow

wf := import("@platforma-sdk/workflow-tengo:workflow")

ll := import("@platforma-sdk/workflow-tengo:ll")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
exec := import("@platforma-sdk/workflow-tengo:exec")
file := import("@platforma-sdk/workflow-tengo:file")
pSpec := import("@platforma-sdk/workflow-tengo:pframes.spec")
render := import("@platforma-sdk/workflow-tengo:render")
assets := import("@platforma-sdk/workflow-tengo:assets")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
llPFrames := import("@platforma-sdk/workflow-tengo:pframes.ll")

//genomes := import(":genomes")
pfCountsConv := import(":pf-counts-conv")

cellRangerTpl := assets.importTemplate(":cell-ranger")

wf.prepare(func(args){
	return{
		resolvedInput: wf.resolve(args.ref, { errIfMissing: true })
	}
})


wf.body(func(args) {

	blockId := wf.blockId().getDataAsJson()
	input := args.resolvedInput
	inputSpec := input.spec

	species := args.species
	
	fileExtension := inputSpec.domain["pl7.app/fileExtension"]

	aggregationTargets := [{
		type: "Resource",
		name: "cellRangerLog"
	}, {
		type: "Resource",
		name: "cellRangerReport"
	}, {
		type: "Resource",
		name: "alignedBAM"
	}, {
		type: "BinaryPartitioned",
		name: "rawCounts",
		path: ["countMatrixImport", "rawCounts"],
		partitionKeyLength: 0 // [geneId]
	}]

	cellRangerResults := llPFrames.aggregate(
		input.data, [1], cellRangerTpl,
		aggregationTargets,
		false,
		{
			blockId: blockId,
			species: species,
			fileExtension: fileExtension
		}
	)

	rawCountsPf := {
		"rawCounts.spec":
		{
			kind: "PColumn",
			name: "pl7.app/rna-seq/countMatrix",
			domain: {
				"pl7.app/blockId": blockId
			},
			valueType: "Double",
			axesSpec: [
				inputSpec.axesSpec[0],
				{
					"name": "pl7.app/rna-seq/cellId",
					"type": "String",
					"domain": {
						"pl7.app/species": species
					},
					"annotations": {
						"pl7.app/label": "Cell Barcode"
					}
				},
				{
					"name": "pl7.app/rna-seq/geneId",
					"type": "String",
					"domain": {
						"pl7.app/species": species
					},
					"annotations": {
						"pl7.app/label": "Ensembl Id"
					}
				}
				],
			annotations: {"pl7.app/label": "Raw gene expression"}
		},
		"rawCounts.data": cellRangerResults.output("rawCounts")
	}

	// Convert pf to csv
	csvCounts := xsv.exportFrame(rawCountsPf, "csv", {})

	outputs := {
		cellRangerProgress: cellRangerResults.output("cellRangerLog"),
		cellRangerReport: cellRangerResults.output("cellRangerReport"),
		alignedBAM: cellRangerResults.output("alignedBAM"),
		rawCountsPf: pframes.exportFrame(rawCountsPf)
	}


	trace := pSpec.makeTrace(inputSpec,
		{type: "milaboratories.cell-ranger", id: blockId, importance: 20, label: "Cell Ranger - "}// + genomes.getSpeciesName(species)}
	)

	// Count matrix export defined with sample from inputSpec + previous specs
	exports := {
		rawCount : {
			spec: trace.inject({
				kind: "PColumn",
				name: "pl7.app/rna-seq/countMatrix",
				domain: {
					"pl7.app/blockId": blockId,
					"pl7.app/species": species,
					"pl7.app/rna-seq/normalized": "false"
				},
				valueType: "Double",
				annotations: {
					"pl7.app/label": "Raw gene expression"
				},
				axesSpec: [
					inputSpec.axesSpec[0],
					{
						"name": "pl7.app/rna-seq/cellId",
						"type": "String",
						"domain": {
							"pl7.app/species": species
							},
							"annotations": {
								"pl7.app/label": "Cell Barcode"
								}
					},
					{
						"name": "pl7.app/rna-seq/geneId",
						"type": "String",
						"domain": {
							"pl7.app/species": species
						},
						"annotations": {
							"pl7.app/label": "Ensembl Id"
						}
					}
					]
			}),
			data: cellRangerResults.output("rawCounts")
	 	}//,
	// normCount : {
	// 		spec: trace.inject({
	// 			kind: "PColumn",
	// 			name: "pl7.app/rna-seq/countMatrix",
	// 			domain: {
	// 				"pl7.app/blockId": blockId,
	// 				"pl7.app/species": species,
	// 				"pl7.app/rna-seq/normalized": "true"
	// 			},
	// 			valueType: "Double",
	// 			annotations: {
	// 				"pl7.app/label": "Normalized gene expression",
	// 				"pl7.app/table/hValue": "true"
	// 			},
	// 			axesSpec: [
	// 				inputSpec.axesSpec[0],
	// 				{
	// 					"name": "pl7.app/rna-seq/cellId",
	// 					"type": "String",
	// 					"domain": {
	// 						"pl7.app/species": species
	// 						},
	// 						"annotations": {
	// 							"pl7.app/label": "Cell Barcode"
	// 							}
	// 				},
	// 				{
	// 					"name": "pl7.app/rna-seq/geneId",
	// 					"type": "String",
	// 					"domain": {
	// 						"pl7.app/species": species
	// 					},
	// 					"annotations": {
	// 						"pl7.app/label": "Ensembl Id"
	// 					}
	// 				}
	// 				]
	// 		}),
	// 		data: rawCountsPf["normcounts.data"] // Change to normCountsPf when declared
	// 	},
	// geneSymbols: {
	// 	spec: trace.inject({
	// 			kind: "PColumn",
	// 			name: "pl7.app/rna-seq/geneSymbols",
	// 			domain: {
	// 				"pl7.app/blockId": blockId,
	// 				"pl7.app/species": species
	// 			},
	// 			valueType: "String",
	// 			annotations: {
	// 				"pl7.app/label": "Gene Symbol"
	// 			},
	// 			axesSpec: [
	// 				inputSpec.axesSpec[0],
	// 				{
	// 					"name": "pl7.app/rna-seq/geneId",
	// 					"type": "String",
	// 					"domain": {
	// 						"pl7.app/blockId": blockId,
	// 						"pl7.app/species": species
	// 					},
	// 					"annotations": {
	// 						"pl7.app/label": "Ensembl Id"//,
	// 						// "pl7.app/table/orderPriority": "10"
	// 					}
	// 				}
	// 				]
	// 		}),
	// 		data: rawCountsPf["genesymbol.data"] // Change to normCountsPf when declared
	// }//,
		//alignedBAM: starResults.output("alignedBAM")
	}

	return {
		outputs: outputs,
		exports: exports
	}
})
