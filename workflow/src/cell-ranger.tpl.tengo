self := import("@platforma-sdk/workflow-tengo:tpl")

json := import("json")
path := import("@platforma-sdk/workflow-tengo:path")

ll := import("@platforma-sdk/workflow-tengo:ll")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
exec := import("@platforma-sdk/workflow-tengo:exec")
file := import("@platforma-sdk/workflow-tengo:file")
assets := import("@platforma-sdk/workflow-tengo:assets")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
pConstants := import("@platforma-sdk/workflow-tengo:pframes.constants")

genomes := import(":genomes")
pfCountsConv := import(":pf-counts-conv")
pfNormCountsConv := import(":pf-norm-counts-conv")
pfMetricsConv := import(":pf-metrics-conv")


self.defineOutputs(
	"cellRangerLog",
	"cellRangerReport",
	// "alignedBAM",
	"countMatrixImport",
	"normCountMatrixImport",
	"cellMetricsImport",
	"summaryContent"
	)


self.body(func(inputs) {
	inputData := inputs[pConstants.VALUE_FIELD_NAME]
	species := inputs.species
	fileExtension := inputs.fileExtension
	blockId := inputs.blockId

	genomeAssets := genomes.getGenomeAsset(species)

	inputDataMeta := inputData.getDataAsJson()

	cellRanger := exec.builder().
		software(assets.importSoftware("@platforma-open/milaboratories.software-cellranger:cellranger")).
		mem("64GB").
		cpu(16).
		// addAsset(genomeAssets, "genomeIndex").
		addAsset(genomeAssets, "genomeIndex", "fasta/").
		addAsset(genomeAssets, "genomeIndex", "genes/").
		addAsset(genomeAssets, "genomeIndex", "star/").
		addAsset(genomeAssets, "genomeIndex", "reference.json").
		arg("count").
		arg("--transcriptome=genomeIndex").
		arg("--fastqs=fastqs")

	if inputDataMeta.keyLength == 1 {
		for sKey, inputFile in inputData.inputs() {
			key := json.decode(sKey)
			if len(key) != 1 {
				ll.panic("malformed key: %v", sKey)
			}
			r := key[0]
			if (r[0] != 'R' && r[0] != "I") || (r[1] != '1' && r[1] != '2') || len(r) != 2 {
				ll.panic("malformed read index: %v", r)
			}
			fileName := "input_S1_L001" + "_" + r + "_001." + fileExtension
			cellRanger.addFile(path.join("fastqs",fileName), inputFile)
		}
	} else if inputDataMeta.keyLength == 2 {
		for sKey, inputFile in inputData.inputs() {
			key := json.decode(sKey)
			if len(key) != 2 {
				ll.panic("malformed key: %v", sKey)
			}
			lane := key[0]
			r := key[1]
			if (r[0] != 'R' && r[0] != "I") || (r[1] != '1' && r[1] != '2') || len(r) != 2 {
				ll.panic("malformed read index: %v", r)
			}
			if is_undefined(int(lane)) {
				ll.panic("malformed lane: %v", lane)
			}
			fileName := "input_S1_L" + lane + "_" + r + "_001." + fileExtension
			cellRanger.addFile(path.join("fastqs",fileName), inputFile)
		}
	}
	
	cellRanger = cellRanger.
		// arg("--sample=input_").
		arg("--create-bam=true").
		arg("--id=sample").
		argWithVar("--localcores={system.cpu}").
		argWithVar("--localmem={system.ram.gb}").
		saveFile("sample/outs/web_summary.html").
		saveFile("sample/outs/filtered_feature_bc_matrix/barcodes.tsv.gz").
		saveFile("sample/outs/filtered_feature_bc_matrix/features.tsv.gz").
		saveFile("sample/outs/filtered_feature_bc_matrix/matrix.mtx.gz").
		saveFile("./sample/outs/possorted_genome_bam.bam").
		saveFileContent("./sample/outs/metrics_summary.csv").
		printErrStreamToStdout().
		saveStdoutContent().
		cache(24 * 60 * 60 * 1000).
		run()

	cellRangerLog := cellRanger.getStdoutStream()
	cellRangerReport := cellRanger.getFile("sample/outs/web_summary.html")
	// bamFile := cellRanger.getFile("possorted_genome_bam.bam")
	cellRangerBarcodes := cellRanger.getFile("sample/outs/filtered_feature_bc_matrix/barcodes.tsv.gz")
	cellRangerFeatures := cellRanger.getFile("sample/outs/filtered_feature_bc_matrix/features.tsv.gz")
	cellRangerCounts := cellRanger.getFile("sample/outs/filtered_feature_bc_matrix/matrix.mtx.gz")

	countMatrixCsv := exec.builder().
		software(assets.importSoftware("@platforma-open/milaboratories.cellranger.software:counts-csv")).
		mem("16GiB").
		cpu(1).
		addFile("barcodes.tsv.gz", cellRangerBarcodes).
		addFile("features.tsv.gz", cellRangerFeatures).
		addFile("matrix.mtx.gz", cellRangerCounts).
		arg("--matrix").arg("matrix.mtx.gz").
		arg("--barcodes").arg("barcodes.tsv.gz").
		arg("--features").arg("features.tsv.gz").
		arg("--output").arg("rawCounts.csv").
		saveFile("rawCounts.csv").
		saveFile("rawCounts_normalized.csv").
		printErrStreamToStdout().
		saveStdoutContent().
		cache(24 * 60 * 60 * 1000).
		run()

	rawCounts := countMatrixCsv.getFile("rawCounts.csv")

	// Set default memory and CPU for imports
    defaultConvMem := "16GiB" // @TODO: set based on the size of the input
    defaultConvCpu := 1 // @TODO: set based on the size of the input

	countCsvParams := pfCountsConv.getColumns(blockId, species)
	countMatrixImport := xsv.importFile(countMatrixCsv.getFile("rawCounts.csv"), "csv", countCsvParams, { dataOnly: true, mem: defaultConvMem, cpu: defaultConvCpu })

	normCounts := countMatrixCsv.getFile("rawCounts_normalized.csv")
	normCountCsvParams := pfNormCountsConv.getColumns(blockId, species)
	normCountMatrixImport := xsv.importFile(normCounts, "csv", normCountCsvParams, { dataOnly: true, mem: defaultConvMem, cpu: defaultConvCpu })
	
	cellMetricsCsv := exec.builder().
		software(assets.importSoftware("@platforma-open/milaboratories.cellranger.software:cell-metrics")).
		mem("16GiB").
		cpu(1).
		addFile("barcodes.tsv.gz", cellRangerBarcodes).
		addFile("features.tsv.gz", cellRangerFeatures).
		addFile("matrix.mtx.gz", cellRangerCounts).
		arg("--matrix").arg("matrix.mtx.gz").
		arg("--barcodes").arg("barcodes.tsv.gz").
		arg("--features").arg("features.tsv.gz").		
		arg("--species").arg(species).
		arg("--output").arg(".").
		saveFile("cell_metrics.csv").
		printErrStreamToStdout().
		saveStdoutContent().
		cache(24 * 60 * 60 * 1000).
		run()

	metricsCsvParams := pfMetricsConv.getColumns(blockId, species)
	cellMetricsImport := xsv.importFile(cellMetricsCsv.getFile("cell_metrics.csv"), "csv", metricsCsvParams, { dataOnly: true, mem: defaultConvMem, cpu: defaultConvCpu })

	output := {
		cellRangerLog: cellRangerLog,
		cellRangerReport: file.exportFile(cellRangerReport),
		// alignedBAM: bamFile,
		countMatrixImport: countMatrixImport,
		normCountMatrixImport: normCountMatrixImport,
		cellMetricsImport: cellMetricsImport,
		summaryContent: cellRanger.getFileContent("sample/outs/metrics_summary.csv")
	}

	return output

})
