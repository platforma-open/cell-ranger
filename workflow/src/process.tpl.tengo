tpl := import("@platforma-sdk/workflow-tengo:tpl")
assets := import("@platforma-sdk/workflow-tengo:assets")

targetOutputs := import(":libs.target-outputs")
pfSymbolsConv := import(":libs.pf-symbols-conv")
filteredCountsConv := import(":libs.filtered-counts-conv")
exportCountsConv := import(":libs.export-counts")
exportNormCountsConv := import(":libs.export-norm-counts")

cellRangerTpl := assets.importTemplate(":cell-ranger")
filterGenesTpl := assets.importTemplate(":filter-genes")
hvgTpl := assets.importTemplate(":calculate-hvg")
mapGenesTpl := assets.importTemplate(":map-genes")

self.awaitState("params", "ResourceReady")
self.awaitState("inputSpec", "ResourceReady")

tpl.body(func(inputs) {
	inputSpec := inputs.inputSpec
	inputData := inputs.inputData

	fileExtension := inputSpec.domain["pl7.app/fileExtension"]

	cellRangerResults := pframes.processColumn(
		{ spec: inputSpec, data: inputData }, cellRangerTpl,
		targetOutputs.getTargetOutputs(species, blockId, inputSpec.axesSpec[0]),
		{
			aggregate: [{
				name: "pl7.app/sequencing/lane",
				optional: true
			}, {
				name: "pl7.app/sequencing/readIndex",
				optional: true
			}],
			passAggregationAxesNames: true,

			traceSteps: [{type: "milaboratories.cell-ranger", id: blockId, importance: 20, label: "Cell Ranger"}],

			extra: {
				species: species,
				fileExtension: fileExtension
			},

			metaExtra: {
				mem: args.mem,
				cpu: args.cpu
			}
		}
	)

	cellMetricsPf := {
		"totalCounts.spec": cellRangerResults.outputSpec("cellMetrics", "totalCounts"),
		"totalCounts.data": cellRangerResults.outputData("cellMetrics", "totalCounts"),
		"nGenesByCounts.spec": cellRangerResults.outputSpec("cellMetrics", "nGenesByCounts"),
		"nGenesByCounts.data": cellRangerResults.outputData("cellMetrics", "nGenesByCounts"),
		"pctCountsMt.spec": cellRangerResults.outputSpec("cellMetrics", "pctCountsMt"),
		"pctCountsMt.data": cellRangerResults.outputData("cellMetrics", "pctCountsMt"),
		"complexity.spec": cellRangerResults.outputSpec("cellMetrics", "complexity"),
		"complexity.data": cellRangerResults.outputData("cellMetrics", "complexity"),
		"pctCountsInTop20Genes.spec": cellRangerResults.outputSpec("cellMetrics", "pctCountsInTop20Genes"),
		"pctCountsInTop20Genes.data": cellRangerResults.outputData("cellMetrics", "pctCountsInTop20Genes")
	}

	csvCounts := xsv.exportFrame({
		"rawCounts.spec": cellRangerResults.outputSpec("rawCounts", "rawCounts"),
		"rawCounts.data": cellRangerResults.outputData("rawCounts", "rawCounts")
	}, "csv", { mem: "16GiB", cpu: 1 })
	csvCountsNormalized := xsv.exportFrame({
		"normCounts.spec": cellRangerResults.outputSpec("normCounts", "normCounts"),
		"normCounts.data": cellRangerResults.outputData("normCounts", "normCounts")
	}, "csv", { mem: "16GiB", cpu: 1 })

	// Filter genes
	filteredGenesResults := render.create(filterGenesTpl, {
		csvCounts: csvCounts,
		normCounts: csvCountsNormalized
	})

	filteredGenesCountsCsv := filteredGenesResults.output("filteredGenesCountsCsv")
	filteredGenesNormalizedCountsCsv := filteredGenesResults.output("filteredGenesNormalizedCountsCsv")

	countCsvParams := filteredCountsConv.getRawColumns(blockId, species, inputSpec)
	filteredRawCountsPf := xsv.importFile(filteredGenesCountsCsv, "csv", countCsvParams, { mem: "16GiB", cpu: 1 })

	normCountCsvParams := filteredCountsConv.getNormColumns(blockId, species, inputSpec)
	filteredNormCountsPf := xsv.importFile(filteredGenesNormalizedCountsCsv, "csv", normCountCsvParams, { mem: "16GiB", cpu: 1 })

	// // Highly Variable Genes calculation
	// hvgResults := render.create(hvgTpl, {
	// 	csvCounts: filteredGenesCountsCsv,
	// 	normCounts: filteredGenesNormalizedCountsCsv
	// })

	// hvgCountsCsv := hvgResults.output("hvgCountsCsv")
	// hvgNormalizedCountsCsv := hvgResults.output("hvgNormalizedCountsCsv")

	// // Convert to pFrames
	// hvgCountsPf := xsv.importFile(hvgCountsCsv, "csv", countCsvParams, { mem: "16GiB", cpu: 1 })
	// hvgNormCountsPf := xsv.importFile(hvgNormalizedCountsCsv, "csv", normCountCsvParams, { mem: "16GiB", cpu: 1 })

	mapGenesResults := render.create(mapGenesTpl, {
		filteredGenesCountsCsv: filteredGenesCountsCsv,
		species: species
	})

	geneSymbolsCsv := mapGenesResults.output("geneSymbolsCsv")

	geneSymbolsImportParams := pfSymbolsConv.getColumns(species)
	geneSymbolsPf := xsv.importFile(geneSymbolsCsv, "csv", geneSymbolsImportParams, { mem: "16GiB", cpu: 1 })

	outputs := {
		cellRangerProgress: cellRangerResults.outputData("cellRangerLog"),
		cellRangerReport: pframes.exportColumnData(cellRangerResults.outputData("cellRangerReport")),
		// alignedBAM: cellRangerResults.output("alignedBAM"),
		rawCountsPf: pframes.exportFrame(filteredRawCountsPf),
		cellMetricsPf: pframes.exportFrame(cellMetricsPf),
		summaryContent: cellRangerResults.outputData("summaryContent")
	}

	trace := pSpec.makeTrace(inputSpec,
		{type: "milaboratories.cell-ranger", id: blockId, importance: 20, label: "Cell Ranger"}// + genomes.getSpeciesName(species)}
	)

	// Count matrix export defined with sample from inputSpec + previous specs
	sampleAxisSpec := copy(inputSpec.axesSpec[0])
	exports := {
		rawCount : {
			spec: trace.inject(exportCountsConv.getSpecs(blockId, species, sampleAxisSpec)),
			data: filteredRawCountsPf["rawCounts.data"]
	 	},
		normCount : {
			spec: trace.inject(exportNormCountsConv.getSpecs(blockId, species, sampleAxisSpec)),
			data: filteredNormCountsPf["normCounts.data"]
		},
		// rawHvgCount : {
		// 	spec: trace.inject(exportCountsConv.getSpecs(blockId, species, sampleAxisSpec)),
		// 	data: hvgCountsPf["rawCounts.data"]
	 	// },
		// normHvgCount : {
		// 	spec: trace.inject(exportNormCountsConv.getSpecs(blockId, species, sampleAxisSpec)),
		// 	data: hvgNormCountsPf["normCounts.data"]
		// },
		geneSymbols: {
			spec: geneSymbolsPf["geneSymbol.spec"],
			data: geneSymbolsPf["geneSymbol.data"]
		},
		totalCounts: {
			spec: cellMetricsPf["totalCounts.spec"],
			data: cellMetricsPf["totalCounts.data"]
		},
		nGenesByCounts: {
			spec: cellMetricsPf["nGenesByCounts.spec"],
			data: cellMetricsPf["nGenesByCounts.data"]
		},
		pctCountsMt: {
			spec: cellMetricsPf["pctCountsMt.spec"],
			data: cellMetricsPf["pctCountsMt.data"]
		},
		complexity: {
			spec: cellMetricsPf["complexity.spec"],
			data: cellMetricsPf["complexity.data"]
		}
	}
})
